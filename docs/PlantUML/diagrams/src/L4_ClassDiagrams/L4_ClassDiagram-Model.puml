@startuml L4_Class Diagram - Model
'https://plantuml.com/class-diagram

class C_API_Model <<C API>> {
    .. Instance Management ..
    GSMP_API Model_Create(Model* instance)
    GSMP_API Model_Destroy(Model* instance)

    .. Runtime ..
    GSMP_API Model_Initialize(Model* instance)
    GSMP_API Model_Reinitialize(Model* instance)
    GSMP_API Model_Step(Model* instance)
    GSMP_API Model_Terminate(Model* instance)

    .. Variables ..
    GSMP_API Model_GetVariableType(Model* instance, char* name, int* type)
    GSMP_API Model_GetVariableDescription(Model* instance, char* name, char* description)
    GSMP_API Model_GetVariableSize(Model* instance, char* name, int* size, int* sizeLength)
    GSMP_API Model_GetVariableIntent(Model* instance, char* name, int* intent)
    GSMP_API Model_SetVariable_Int(Model* instance, char* name, int* value)
    ..  . . .  ..
    GSMP_API Model_GetVariable_Int(Model* instance, char* name, int* value)
    ..  . . .  ..
}

note left of C_API_Model
    .. GSMP_API ..
    Pre-processor definition of
    linkage, visibility, and
    return type.
end note

abstract Model <<namespace::GSMP>> {
    ' - GSMP_PlatformOptions platform ' FUTURE WORK
    ' - ModelOptions options ' FUTURE WORK
    .. Instantiation ..
    + ReturnCode GetVariableInformation(string information)

    .. Runtime ..
    + ReturnCode Initialize()
    + ReturnCode Reinitialize()
    + ReturnCode Step()
    + ReturnCode Terminate()

    .. Variables ..
    + ReturnCode GetVariableType(string name, VariableType type)
    + ReturnCode GetVariableDescription(string name, string description)
    + ReturnCode GetVariableSize(string name, list<int> size)
    + ReturnCode GetVariableIntent(string name, VariableIntent intent)
    + ReturnCode GetVariable(string name, ...???...)
    + ReturnCode SetVariable(string name, ...???...)
}

note right of Model
    <?> Default format of Interface 
    Requirements Specification for
    the Modelling Platform. <?>
end note

note right of Model
    Use Cpp 'Generics'.
end note

class ModelCpp <<namespace::GSMP>> {
    VariableManager variables
}

class ModelC <<namespace::GSMP>> {
}

class ModelCBackend <<C API>> {
    VariableManager variables
}

note left of ModelCpp
    Variable methods, might 
    need variable manager instance
    as arguement.
end note

' -- Relationships --
' Define Cpp relationships
Model --|> ModelCpp : implements
ModelCpp *-- VariableManager : uses

' Define C Relationships (including Cpp components)
C_API_Model ..> Model : calls instance
Model --|> ModelC : implements
ModelC ..> ModelCBackend : wraps
ModelCBackend --> C_API_VariableManager : calls instance
C_API_VariableManager ..> VariableManager : calls instance

' C_API_Model --> ReturnCode : uses
' C_API_Model --> VariableIntent : uses
' C_API_Model --> VariableType : uses

' -- Enumerated Type Definitions --
enum VariableIntent {
    Undefined
    Input
    Output
    Override
}

enum VariableType {
    double [double]
    single [float]
    byte [int8_t]
    unsignedByte [uint8_t]
    short [int16_t]
    unsignedShort [uint16_t]
    int [int32_t]
    unsignedInt [uint32_t]
    long [int64_t]
    unsignedLong [uint64_t]
    boolean [bool]
    string [char*]
}

enum ReturnCode {
    ERROR = -1
    OK = 0
    PENDING = 1
}

@enduml