@startuml L2_Container Diagram - Simulation Model Platform

!theme C4_united from <C4/themes>
!include <C4/C4_Container>

Person(User,"User", "An Engineer Simulating Models.")

System_Boundary(SimulationModelPlatform, "Simulation Model Platform") {
    Container(UserInterface, "User Interface", "CLI, GUI, Web App", "Handles **User** interactions with **Model Platform** and **Scripting Engine**. Optionally, allows user to configure and edit input files.")
    Container(SimulationManager, "Simulation Manager", "C#", "Manages all **Simulations** on the System. Handles **User** requests that control **Simulations**. Monitors status of **Simulations**.")
    Container(ScriptingEngine,"Simulation Script Engine", "<?>", "Parses **User** input scripts:\n**Model List** parsed to command loading of **Model Backends**.\n**Simulation Script** parsed to command **Model Manager** to run **Simulation**.")
    Container(ModelManager, "Model Manager", "C#", "Manages **Model Collection**. Manages consolidated **Model Collection** interfaces. Interfaces with each **Model Backend** in **Model Collection**.")
}

System_Boundary(Models, "Model Architecture Compliant Models") {
    Container(Model, "Model", "Supported Backend", "Compliant **Model** wrapped in a specific **Model Backend**.")
}

Rel_D(User, UserInterface, "Uses")
Rel(UserInterface, SimulationManager, "Uses API", "Input Files, User Controls")
Rel(SimulationManager, ScriptingEngine, "Initialises", "Model List,\nSimulation Script")
Rel(SimulationManager, ScriptingEngine, "Sends User\nrequests to", "Start, Pause, Stop")
Rel(ScriptingEngine, SimulationManager, "Reports status to", "Rep No., Test Script Status, etc.")
Rel(ScriptingEngine, ModelManager, "Controls", "Wait, Get, Set")
Rel_D(ModelManager, Model, "Runs", "Init, ReInit, Step, Term")

@enduml