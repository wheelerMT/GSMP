@startuml L2_Container Diagram - Generic Simulation & Modelling Platform

!theme C4_united from <C4/themes>
!include <C4/C4_Container>

Person(User,"User", "An Engineer simulating **Scenarios** on a collection of **Models**")

System_Boundary(SimulationModelPlatform, "Generic Simulation & Modelling Platform") {
    Container(UserInterface, "User Interface", "CLI, GUI, Web App", "Handles **User** interactions with **Simulations**. Optionally, allows user to configure and edit **Scripts**.")
    Container(SimulationManager, "Simulation Manager", "C#", "Manages all **Simulations** on the System. Handles **User** requests that control **Simulations**. Monitors status of **Simulations**.")
    Container(Simulation,"Simulation", "C#, Script Parsing", "A separate **Simulation** process instantiated by **Simulation Manager**. Parses **User** scripts to: Load a list of **Models**. Command **Model Manager** to run a **Simulation** **Scenario**.")
    Container(ModelManager, "Model Manager", "C#", "Manages list of **Models**. Manages consolidated variables of managed **Models**. Commands each managed **Model**, and associated interfaces.")
}

System_Boundary(Models, "Model Architecture Compliant Models") {
    Container(Model, "Model", "C#, Target Backend", "A **Model** that is architecturally consistent. Obscures the **Target Backend**. Shares a common interface for all **Models**, implemented in C#. Registers all **Model** variables.")
}

Rel_D(User, UserInterface, "Uses")
Rel(UserInterface, SimulationManager, "Uses API", "Input Files, User Controls")
Rel(SimulationManager, Simulation, "Initialises", "Model List,\nSimulation Script")
Rel(SimulationManager, Simulation, "Sends User\nrequests to", "Start, Pause, Stop")
Rel(Simulation, SimulationManager, "Reports status to", "Rep No., Test Script Status, etc.")
Rel(Simulation, ModelManager, "Controls", "Wait, Get, Set")
Rel_D(ModelManager, Model, "Runs", "Init, ReInit, Step, Term")

@enduml